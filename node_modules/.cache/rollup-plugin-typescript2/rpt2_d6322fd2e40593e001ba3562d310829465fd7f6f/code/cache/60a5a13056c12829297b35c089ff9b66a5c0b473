{"code":"import { __awaiter } from \"tslib\";\nexport class BaseCanvasInstance {\n    constructor(options) {\n        /**\n         * 缓存传入数据的起始坐标位置\n         */\n        this.positionMap = {};\n        /**\n         * canvas渲染文字默认字体\n         */\n        this.defaultFontFamlily = 'sans-serif';\n        this.options = options;\n        this.init();\n    }\n    /**\n    * canvas 渲染上下文\n    */\n    get ctx() {\n        var _a;\n        return this.context = (_a = this.context) !== null && _a !== void 0 ? _a : this.options.element.getContext('2d');\n    }\n    /**\n     * 初始化操作\n     */\n    init() {\n        this.validator();\n        this.setDefaultFamlily();\n        this.initElement();\n    }\n    /**\n     * 校验元素\n     */\n    validator() {\n        const { width, height } = this.options;\n        if (!this.ctx) {\n            throw new Error(`请确认canvas节点是否存在`);\n        }\n        if (!width || !height) {\n            throw new Error(`请设置canvas的宽高度`);\n        }\n    }\n    /**\n     * 默认字体设置\n     */\n    setDefaultFamlily() {\n    }\n    /**\n     * 初始化节点\n     */\n    initElement() {\n        const { element, width, height } = this.options;\n        element.width = Number(`${width}`);\n        element.height = Number(`${height}`);\n        this.render();\n    }\n    /**\n     * 渲染数据\n     */\n    render() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let item = null, index = 0;\n            while (item = this.options.dataSource.shift()) {\n                yield this.renderItem(item, ++index);\n            }\n        });\n    }\n    /**\n     * 渲染节点\n     */\n    renderItem(data, index) {\n        const { type, value } = data;\n        let { x = 0, y = 0, fixed = false, parentId = '', id = `${index}` } = value;\n        const newValue = Object.assign(Object.assign({}, value), { x, y, fixed, parentId, id });\n        if (fixed) {\n            const parentPosition = this.positionMap[parentId];\n            x += parentPosition ? parentPosition.x : 0;\n            y += parentPosition ? parentPosition.y : 0;\n        }\n        switch (type) {\n            case 'image':\n                return this.renderImage(newValue);\n            case 'text':\n                return this.renderText(newValue);\n            default:\n                throw new Error(`当前还未适配${type}类型`);\n        }\n    }\n    /**\n     * 渲染图片\n     */\n    renderImage(data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { r = 0, width, height, id, x, y } = data;\n            if (r > 0 && (r !== width / 2 || r !== height / 2)) {\n                throw new Error(`当前传入的半径值不到宽或高的一半,无法绘制圆形`);\n            }\n            const value = yield this.getRenderImageInstance(data.value);\n            const newData = Object.assign(Object.assign({}, data), { value });\n            r ? this.drawCircleImage(newData) : this.drawNormalImage(newData);\n            this.positionMap[id] = { x, y };\n        });\n    }\n    /**\n     * 渲染文字\n     */\n    renderText(data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { ctx, defaultFontFamlily } = this;\n            const { fontSize = 12, fontFamlily = defaultFontFamlily, color = '#000', style = {}, value, x, y, id } = data;\n            const newData = this.setTextStyle(Object.assign(Object.assign({}, data), { fontSize, fontFamlily }));\n            const newY = y + newData.fontSize;\n            ctx.fillText(value, x, newY);\n            this.positionMap[id] = { x, y: newY };\n        });\n    }\n}\n","references":["/Users/wufengliang/Documents/private-projects/canvas-poster/src/type.ts"]}
