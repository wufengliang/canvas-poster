{"code":"import { __assign, __awaiter, __extends, __generator } from \"tslib\";\n/*\n * @Author: wufengliang 44823912@qq.com\n * @Date: 2024-01-27 18:06:22\n * @LastEditTime: 2024-01-27 22:51:13\n * @Description:\n */\n/*\n * @Author: wufengliang 44823912@qq.com\n * @Date: 2024-01-27 18:06:22\n * @LastEditTime: 2024-01-27 20:15:47\n * @Description:\n */\nimport { BaseCanvasInstance } from './base';\nvar BrowserCanvasInstance = /** @class */ (function (_super) {\n    __extends(BrowserCanvasInstance, _super);\n    function BrowserCanvasInstance(options) {\n        return _super.call(this, options) || this;\n    }\n    /**\n     * 获取图片实例资源\n     */\n    BrowserCanvasInstance.prototype.getRenderImageInstance = function (url) {\n        return __awaiter(this, void 0, void 0, function () {\n            var image;\n            return __generator(this, function (_a) {\n                image = new Image;\n                image.src = url;\n                return [2 /*return*/, new Promise(function (resolve) {\n                        image.onload = function () { return resolve(image); };\n                    })];\n            });\n        });\n    };\n    BrowserCanvasInstance.prototype.drawCircleImage = function (data) {\n        var ctx = this.ctx;\n        var x = data.x, y = data.y, width = data.width, height = data.height, value = data.value, id = data.id;\n        var centerX = x + width / 2, centerY = y + height / 2;\n        var radius = Math.min(centerX, centerY);\n        ctx.save();\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);\n        ctx.clip();\n        ctx.drawImage(value, centerX - radius, centerY - radius, radius * 2, radius * 2);\n        ctx.restore();\n    };\n    BrowserCanvasInstance.prototype.drawNormalImage = function (data) {\n        var ctx = this.ctx;\n        var x = data.x, y = data.y, width = data.width, height = data.height, value = data.value, id = data.id;\n        ctx.save();\n        ctx.beginPath();\n        ctx.drawImage(value, x, y, width, height);\n        ctx.restore();\n    };\n    BrowserCanvasInstance.prototype.setTextStyle = function (value) {\n        var _a = this, ctx = _a.ctx, defaultFontFamlily = _a.defaultFontFamlily;\n        var _b = value.fontSize, fontSize = _b === void 0 ? 12 : _b, _c = value.fontFamlily, fontFamlily = _c === void 0 ? defaultFontFamlily : _c, _d = value.color, color = _d === void 0 ? '#000' : _d, _e = value.style, style = _e === void 0 ? {} : _e;\n        ctx.font = \"\".concat(fontSize, \"px \").concat(fontFamlily);\n        ctx.fillStyle = color;\n        for (var key in style) {\n            if (key in ctx) {\n                ctx[key] = style[key];\n            }\n        }\n        return __assign(__assign({}, value), { fontSize: fontSize, fontFamlily: fontFamlily, color: color, style: style });\n    };\n    return BrowserCanvasInstance;\n}(BaseCanvasInstance));\nexport { BrowserCanvasInstance };\n","references":["/Users/wufengliang/Documents/private-projects/canvas-poster/src/base.ts","/Users/wufengliang/Documents/private-projects/canvas-poster/src/type.ts"]}
