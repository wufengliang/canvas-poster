{"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nvar BaseCanvasInstance = /** @class */ (function () {\n    function BaseCanvasInstance(options) {\n        /**\n         * 缓存传入数据的起始坐标位置\n         */\n        this.positionMap = {};\n        /**\n         * canvas渲染文字默认字体\n         */\n        this.defaultFontFamlily = 'sans-serif';\n        this.options = options;\n        this.init();\n    }\n    Object.defineProperty(BaseCanvasInstance.prototype, \"ctx\", {\n        /**\n        * canvas 渲染上下文\n        */\n        get: function () {\n            var _a;\n            return this.context = (_a = this.context) !== null && _a !== void 0 ? _a : this.options.element.getContext('2d');\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * 初始化操作\n     */\n    BaseCanvasInstance.prototype.init = function () {\n        this.validator();\n        this.setDefaultFamlily();\n        this.initElement();\n    };\n    /**\n     * 校验元素\n     */\n    BaseCanvasInstance.prototype.validator = function () {\n        var _a = this.options, width = _a.width, height = _a.height;\n        if (!this.ctx) {\n            throw new Error(\"\\u8BF7\\u786E\\u8BA4canvas\\u8282\\u70B9\\u662F\\u5426\\u5B58\\u5728\");\n        }\n        if (!width || !height) {\n            throw new Error(\"\\u8BF7\\u8BBE\\u7F6Ecanvas\\u7684\\u5BBD\\u9AD8\\u5EA6\");\n        }\n    };\n    /**\n     * 默认字体设置\n     */\n    BaseCanvasInstance.prototype.setDefaultFamlily = function () {\n    };\n    /**\n     * 初始化节点\n     */\n    BaseCanvasInstance.prototype.initElement = function () {\n        var _a = this.options, element = _a.element, width = _a.width, height = _a.height;\n        element.width = Number(\"\".concat(width));\n        element.height = Number(\"\".concat(height));\n        this.render();\n    };\n    /**\n     * 渲染数据\n     */\n    BaseCanvasInstance.prototype.render = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var item, index;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        item = null, index = 0;\n                        _a.label = 1;\n                    case 1:\n                        if (!(item = this.options.dataSource.shift())) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.renderItem(item, ++index)];\n                    case 2:\n                        _a.sent();\n                        return [3 /*break*/, 1];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * 渲染节点\n     */\n    BaseCanvasInstance.prototype.renderItem = function (data, index) {\n        var type = data.type, value = data.value;\n        var _a = value.x, x = _a === void 0 ? 0 : _a, _b = value.y, y = _b === void 0 ? 0 : _b, _c = value.fixed, fixed = _c === void 0 ? false : _c, _d = value.parentId, parentId = _d === void 0 ? '' : _d, _e = value.id, id = _e === void 0 ? \"\".concat(index) : _e;\n        var newValue = __assign(__assign({}, value), { x: x, y: y, fixed: fixed, parentId: parentId, id: id });\n        if (fixed) {\n            var parentPosition = this.positionMap[parentId];\n            x += parentPosition ? parentPosition.x : 0;\n            y += parentPosition ? parentPosition.y : 0;\n        }\n        switch (type) {\n            case 'image':\n                return this.renderImage(newValue);\n            case 'text':\n                return this.renderText(newValue);\n            default:\n                throw new Error(\"\\u5F53\\u524D\\u8FD8\\u672A\\u9002\\u914D\".concat(type, \"\\u7C7B\\u578B\"));\n        }\n    };\n    /**\n     * 渲染图片\n     */\n    BaseCanvasInstance.prototype.renderImage = function (data) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, r, width, height, id, x, y, value, newData;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = data.r, r = _a === void 0 ? 0 : _a, width = data.width, height = data.height, id = data.id, x = data.x, y = data.y;\n                        if (r > 0 && (r !== width / 2 || r !== height / 2)) {\n                            throw new Error(\"\\u5F53\\u524D\\u4F20\\u5165\\u7684\\u534A\\u5F84\\u503C\\u4E0D\\u5230\\u5BBD\\u6216\\u9AD8\\u7684\\u4E00\\u534A,\\u65E0\\u6CD5\\u7ED8\\u5236\\u5706\\u5F62\");\n                        }\n                        return [4 /*yield*/, this.getRenderImageInstance(data.value)];\n                    case 1:\n                        value = _b.sent();\n                        newData = __assign(__assign({}, data), { value: value });\n                        r ? this.drawCircleImage(newData) : this.drawNormalImage(newData);\n                        this.positionMap[id] = { x: x, y: y };\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * 渲染文字\n     */\n    BaseCanvasInstance.prototype.renderText = function (data) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, ctx, defaultFontFamlily, _b, fontSize, _c, fontFamlily, _d, color, _e, style, value, x, y, id, newData, newY;\n            return __generator(this, function (_f) {\n                _a = this, ctx = _a.ctx, defaultFontFamlily = _a.defaultFontFamlily;\n                _b = data.fontSize, fontSize = _b === void 0 ? 12 : _b, _c = data.fontFamlily, fontFamlily = _c === void 0 ? defaultFontFamlily : _c, _d = data.color, color = _d === void 0 ? '#000' : _d, _e = data.style, style = _e === void 0 ? {} : _e, value = data.value, x = data.x, y = data.y, id = data.id;\n                newData = this.setTextStyle(__assign(__assign({}, data), { fontSize: fontSize, fontFamlily: fontFamlily }));\n                newY = y + newData.fontSize;\n                ctx.fillText(value, x, newY);\n                this.positionMap[id] = { x: x, y: newY };\n                return [2 /*return*/];\n            });\n        });\n    };\n    return BaseCanvasInstance;\n}());\nexport { BaseCanvasInstance };\n","references":["/Users/wufengliang/Documents/private-projects/canvas-poster/src/type.ts"]}
